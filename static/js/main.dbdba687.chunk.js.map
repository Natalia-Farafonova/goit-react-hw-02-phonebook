{"version":3,"sources":["Components/Section/Section.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","index.js"],"names":["Section","title","children","ContactForm","state","number","name","handleInputChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","type","pattern","required","onChange","Component","ContactList","contacts","onDelete","map","el","onClick","id","Filter","App","filter","formSubmitHandler","data","some","contact","alert","nanoid","prevState","deleteContact","changeFilter","normalizeFilter","toLowerCase","filterContacts","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbdba687.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class ContactForm extends Component {\n  state = {\n    number: '',\n    name: '',\n  };\n\n  handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div>\n          <h2>Name</h2>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleInputChange}\n          />\n        </div>\n        <div>\n          <h2>Number</h2>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleInputChange}\n          />\n        </div>\n        <button>Add contact</button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport default function ContactList({ contacts, onDelete }) {\n  return (\n    <ol>\n      {contacts.map(el => (\n        <li key={el.id}>\n          <p>\n            <span>\n              {el.name}: {el.number}\n            </span>\n            <button type=\"button\" onClick={() => onDelete(el.id)}>\n              Delete\n            </button>\n          </p>\n        </li>\n      ))}\n    </ol>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nexport default Filter;\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n","import React, { Component } from 'react';\nimport Section from './Components/Section/Section';\nimport ContactForm from './Components/ContactForm/ContactForm';\nimport { nanoid } from 'nanoid';\nimport ContactList from './Components/ContactList/ContactList';\nimport Filter from './Components/Filter/Filter';\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  formSubmitHandler = data => {\n    if (this.state.contacts.some(contact => contact.name === data.name)) {\n      alert(`${data.name} is already in contacts.`);\n    } else {\n      const contact = {\n        id: nanoid(10),\n        name: data.name,\n        number: data.number,\n      };\n      this.setState(prevState => ({\n        contacts: [contact, ...prevState.contacts],\n      }));\n    }\n  };\n\n  deleteContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  render() {\n    const { filter } = this.state;\n\n    const normalizeFilter = this.state.filter.toLowerCase();\n    const filterContacts = this.state.contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter),\n    );\n\n    return (\n      <div>\n        <Section title=\"Phonebook\">\n          <ContactForm onSubmit={this.formSubmitHandler} />\n        </Section>\n        <Section title=\"Contacts\">\n          <Filter value={filter} onChange={this.changeFilter} />\n          <ContactList\n            contacts={filterContacts}\n            onDelete={this.deleteContact}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}